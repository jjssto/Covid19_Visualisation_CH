# Corona-Übersicht
[Timestamp]

```{python, echo = False}
import numpy as np
import pandas as pd
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()
import math
from datetime import datetime, timedelta
from cycler import cycler
import matplotlib.pyplot as plt
from index import Index
from plot_canton import Plot_canton

# Import data provided by Open Data Zurich
dat = pd.read_csv('data/ch.csv',
    	parse_dates = ['date']
    	#date_parser = dateparse,
    	)

dat_inter = pd.read_csv('data/ch_interpolated.csv',
    	parse_dates = ['date']
		)
dat_ffill = pd.read_csv('data/ch_ffill.csv',
    	parse_dates = ['date']
		)

cantons = dat['canton'].drop_duplicates()
```


## Vollständigkeit

```{python Vollständigkeit, include = True, echo = False}
dates = dat['date'].drop_duplicates()
total_days = len(dates)
data_exists = []
with Index(dat,'date') as df:
	for date in dates:
		data_exists.append((df.loc[:,'canton'].loc[date]))
data_exists_nbr = []
for element in data_exists:
	data_exists_nbr.append(len(element))
date_complete_index = total_days -1
while data_exists_nbr[ date_complete_index ] < 26:
	date_complete_index = date_complete_index - 1

date_complete = dates.iloc[ date_complete_index ]
dates_complete = dates[dates <= date_complete].to_list()
dates_incomplete = dates[dates >= date_complete].to_list()
def complete_index( dates_arg ):
	return( dates_arg[dates_arg <= date_complete].to_list() )

def incomplete_index( dates_arg ):
	return( dates_arg[dates_arg >= date_complete].to_list() )

for i in range(total_days-7,total_days):
	print(str(dates.iloc[i]) + ": "+ str(data_exists_nbr[i]) + " Kantone\n" + str(data_exists[i].values))
```

```{python cycler, include = True, echo = False}
default_cycler = (
	cycler( color=['blue','green','orange','red','fuchsia'] )*
	cycler( linestyle=['-'])
	)
col_cycler = (
	cycler( color=['blue','green','orange','red','fuchsia'] )*
	cycler( linestyle=['-',':'])
	)
```

# Schweizweite Entwicklung

```{python Totale Anzahl, include = True, echo = False, caption = "Totale Fallzahlen in der Schweiz basierend auf katnonalen Meldungen. Fehlende Daten wurden interpoliert"}
with Index(dat_inter,['canton']) as df_:
	zh_vent = df_.loc['ZH','current_vent'].values

with Index(dat_inter,['date','canton']) as df_:
	df = df_.sum(level='date',skipna=True)
	zh_vent[np.isnan(zh_vent)] = 0
	df.loc[:,'current_icu'] = df.loc[:,'current_icu']
	df
	df.iloc[-len(zh_vent):,4] += zh_vent

	complete = complete_index( dates )
	incomplete = incomplete_index( dates )

	fig = plt.figure()
	plt.rc('axes', prop_cycle=col_cycler)
	ax = fig.subplots()
	ax.plot(df['ncumul_conf'].loc[complete],label='Positive Testergebnisse')
	ax.plot(df['ncumul_conf'].loc[incomplete],label='')
	ax.plot(df['current_hosp'].loc[complete],label='Hospitalisierungen')
	ax.plot(df['current_hosp'].loc[incomplete],label='')
	ax.plot(df['ncumul_deceased'].loc[complete],label='Verstorben')
	ax.plot(df['ncumul_deceased'].loc[incomplete],label='')
	ax.plot(df['current_icu'].loc[complete],label='Intensivstation')
	ax.plot(df['current_icu'].loc[incomplete],label='')
	plt.yscale('log')
	plt.grid(which='both')
	plt.legend()
	ax.set_title('Schweiz (Fallzahlen)')
	ax.set_ylabel('Anzahl Fälle')
	fig.autofmt_xdate()

plt.rc('axes', prop_cycle=default_cycler)
```

```{python Neuansteckungen, include = True, echo = False}
cantons = dat['canton'].drop_duplicates()
dates = dat['date'].drop_duplicates()
cols = dat.columns[[3,4,5,6,7,8,9]]
df_ = dat.set_index(['canton','date'])
with Index(dat_inter,['canton','date']) as df_:

	df = df_.sum(level='date',skipna=True)
	#df = df.sum(level='date',skipna=True)
	df.loc[:,'current_hosp'] = df.loc[:,'current_hosp'] + df.loc[:,'ncumul_released'] + df.loc[:,'ncumul_deceased']
	zh_vent = df_.loc['ZH','current_vent'].values
	zh_vent[np.isnan(zh_vent)] = 0
	df.loc[:,'current_icu'] = df.loc[:,'current_icu'] + df.loc[:,'ncumul_deceased']
	df.iloc[-len(zh_vent):,4] += zh_vent
	df = df.rolling('7D',min_periods=7).mean().diff()
	len(zh_vent)

	complete = complete_index( dates )
	incomplete = incomplete_index( dates )

	fig = plt.figure()
	plt.rc('axes', prop_cycle=col_cycler)
	ax = fig.subplots()
	ax.plot(df['ncumul_conf'].loc[complete],label='Neue Positive Testergebnisse')
	ax.plot(df['ncumul_conf'].loc[incomplete],label='')
	ax.plot(df['current_hosp'].loc[complete],label='Neue Hospitalisierungen')
	ax.plot(df['current_hosp'].loc[incomplete],label='')
	#ax.plot(df['current_icu'].loc[complete],label='Intensivstation')
	#ax.plot(df['current_icu'].loc[incomplete],label='')
	ax.plot(df['ncumul_deceased'].loc[complete],label='Verstorben')
	ax.plot(df['ncumul_deceased'].loc[incomplete],label='')
	plt.yscale('log')
	plt.grid(which='both')
	plt.legend()
	ax.set_title('Schweiz (Durchschnittswerte der letzten 7 Tage)')
	ax.set_ylabel('Durschnittswert pro Tag')
	fig.autofmt_xdate()

plt.rc('axes', prop_cycle=default_cycler)
```

# Entwicklung in den Kantonen

## Luzern

```{python, include = True, echo = False}
plot_lu = Plot_canton('LU','Luzern')
plot_lu.plot0(dat)
```

## Aargau

```{python, include = True, echo = False}
plot_lu = Plot_canton('AG','Aargau')
plot_lu.plot0(dat)
```

## Basel-Stadt
```{python, include = True, echo = False}
plot_lu = Plot_canton('BS','Basel-Stadt')
plot_lu.plot0(dat)
```

## Basel-Land
```{python, include = True, echo = False}
plot_lu = Plot_canton('BL','Basel-Land')
plot_lu.plot0(dat)
```
## Bern

```{python, include = True, echo = False}
plot_lu = Plot_canton('BE','Bern')
plot_lu.plot0(dat)
```

## Zürich

```{python, include = True, echo = False}
plot_lu = Plot_canton('ZH','Zürich')
plot_lu.plot0(dat)
```

## Genf

```{python, include = True, echo = False}
plot_lu = Plot_canton('GE','Genf')
plot_lu.plot0(dat)
```

## Waadt

```{python, include = True, echo = False}
plot_lu = Plot_canton('VD','Waadt')
plot_lu.plot0(dat)
```

## Tessin

```{python, include = True, echo = False}
plot_lu = Plot_canton('TI','Tessin')
plot_lu.plot0(dat)
```
